#include<stdio.h>
#include<stdlib.h>

// Define the maximum size of the queue
#define MAX_SIZE 20

int front = 0, rear = 0;

// Function to enqueue an element into the circular queue
int enqueue(int n, int a[]) {
    int data;

    // Check if the queue is full
    if ((rear + 1) % n == front) {
        printf("Queue is full\n");
    } else {
        rear = (rear + 1) % n;
        printf("Enter data: ");
        scanf("%d", &data);
        a[rear] = data;
    }

    return rear;
}

// Function to dequeue an element from the circular queue
int dequeue(int a[], int n) {
    // Check if the queue is empty
    if (front == rear) {
        printf("Queue is empty\n");
    } else {
        printf("%d is deleted\n", a[(front + 1) % n]);
        front = (front + 1) % n;
    }

    return front;
}

// Function to display the elements of the circular queue
void display(int a[], int n) {
    if (front == rear) {
        printf("Queue is empty\n");
    } else {
        // Display elements from front+1 to rear
        for (int i = (front + 1) % n; i != rear; i = (i + 1) % n) {
            printf("%d ", a[i]);
        }
        printf("%d\n", a[rear]);  // Display the last element
    }
}

void main() {
    int ch, a[MAX_SIZE], n;

    // Input the limit
    printf("Enter limit: ");
    scanf("%d", &n);

    // Menu-driven program
    while (1) {
        // Display menu options
        printf("\nMenu:\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                rear = enqueue(n, a);
                break;
            case 2:
                front = dequeue(a, n);
                break;
            case 3:
                display(a, n);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
}
